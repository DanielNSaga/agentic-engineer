"""Typed planner request/response schemas shared with LLM integrations."""

from __future__ import annotations

from typing import Any, Dict, List, Optional, Literal

from pydantic import BaseModel, Field


class PlannerTask(BaseModel):
    """Schema describing a single task emitted by the planning model."""

    id: Optional[str] = Field(
        default=None,
        description="Stable identifier for the task (unique within the plan).",
    )
    title: str = Field(..., description="Short human readable task name.")
    summary: str = Field(..., description="Detailed explanation of the task objective.")
    depends_on: List[str] = Field(
        default_factory=list,
        description="List of task identifiers or titles that must complete first.",
    )
    constraints: List[str] = Field(
        default_factory=list,
        description="Task-specific constraints that must be respected.",
    )
    deliverables: List[str] = Field(
        default_factory=list,
        description="Artifacts that should exist once the task is complete.",
    )
    optional_deliverables: List[str] = Field(
        default_factory=list,
        description="Nice-to-have artifacts that are explicitly optional.",
    )
    acceptance_criteria: List[str] = Field(
        default_factory=list,
        description="Measurable expectations to confirm the task is complete.",
    )
    notes: List[str] = Field(
        default_factory=list,
        description="Additional reminders or clarifications for the executor.",
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict,
        description="Arbitrary structured data produced by the planner.",
    )
    priority: Optional[int] = Field(
        default=None,
        description="Relative ordering priority (higher values scheduled first).",
    )
    effort: Optional[str] = Field(
        default=None,
        description="Optional qualitative effort estimate supplied by the planner.",
    )


class PlannerDecision(BaseModel):
    """Schema describing supporting decisions or references for the plan."""

    id: Optional[str] = Field(default=None, description="Stable identifier for the decision.")
    title: str = Field(..., description="Concise title for the decision or note.")
    content: str = Field(..., description="Detailed decision narrative or context.")
    kind: str = Field(default="general", description="Classification label for the decision.")
    task_id: Optional[str] = Field(
        default=None,
        description="Optional task identifier that this decision supports.",
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict,
        description="Structured metadata associated with the decision.",
    )


class PlannerRisk(BaseModel):
    """Schema describing a risk item produced by the planner."""

    id: Optional[str] = Field(default=None, description="Identifier for the risk entry.")
    description: str = Field(..., description="Summary of the potential risk.")
    mitigation: Optional[str] = Field(
        default=None,
        description="Suggested mitigation or response for the risk.",
    )
    impact: Optional[str] = Field(
        default=None,
        description="Qualitative impact rating (e.g. high/medium/low).",
    )
    likelihood: Optional[str] = Field(
        default=None,
        description="Qualitative likelihood (e.g. high/medium/low).",
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict,
        description="Structured metadata associated with the risk.",
    )


class PlannerResponse(BaseModel):
    """Top-level structured response generated by the planning phase."""

    plan_id: Optional[str] = Field(
        default=None,
        description="Optional identifier for the overall plan.",
    )
    plan_name: str = Field(
        default="Execution Plan",
        description="Human readable plan name.",
    )
    plan_summary: str = Field(
        default="",
        description="High-level overview of the plan and target goal.",
    )
    tasks: List[PlannerTask] = Field(
        default_factory=list,
        description="Ordered list of actionable tasks.",
    )
    decisions: List[PlannerDecision] = Field(
        default_factory=list,
        description="Supporting decisions, assumptions, or context notes.",
    )
    risks: List[PlannerRisk] = Field(
        default_factory=list,
        description="Enumerated risks associated with the plan.",
    )
    metadata: Dict[str, Any] = Field(
        default_factory=dict,
        description="Arbitrary metadata emitted by the planner.",
    )


class PlannerAnalysisComponent(BaseModel):
    """Structural element identified during the analysis planner pass."""

    name: str = Field(..., description="Human-readable component name.")
    summary: str = Field(..., description="Why this component matters for the goal.")
    rationale: Optional[str] = Field(
        default=None,
        description="Optional explanation of the component's relevance.",
    )
    primary_paths: List[str] = Field(
        default_factory=list,
        description="Paths that implement the component (files or directories).",
    )
    key_symbols: List[str] = Field(
        default_factory=list,
        description="Important classes/functions/constants to inspect.",
    )
    related_tests: List[str] = Field(
        default_factory=list,
        description="Existing tests that exercise the component.",
    )
    risks: List[str] = Field(
        default_factory=list,
        description="Component-specific risks or edge cases.",
    )


class PlannerAnalysis(BaseModel):
    """Output produced by the repository analysis planner pass."""

    components: List[PlannerAnalysisComponent] = Field(
        default_factory=list,
        description="Key code or domain components relevant to the goal.",
    )
    deliverable_map: Dict[str, List[str]] = Field(
        default_factory=dict,
        description="Mapping of deliverables to responsible components or files.",
    )
    validation_assets: List[str] = Field(
        default_factory=list,
        description="Existing tests, scripts, or commands useful for validation.",
    )
    knowledge_gaps: List[str] = Field(
        default_factory=list,
        description="Open questions or missing context blocking execution.",
    )
    risks: List[PlannerRisk] = Field(
        default_factory=list,
        description="Risks discovered during analysis.",
    )
    notes: List[str] = Field(
        default_factory=list,
        description="Additional reminders for later planner passes.",
    )


class PlannerCritiqueIssue(BaseModel):
    """Single issue raised by the planning critic pass."""

    title: str = Field(..., description="Concise issue summary.")
    severity: Literal["must_fix", "should_fix", "nice_to_have"] = Field(
        ...,
        description="Severity rating guiding whether a refinement pass is required.",
    )
    details: str = Field(..., description="Supporting explanation or evidence.")
    related_tasks: List[str] = Field(
        default_factory=list,
        description="Task identifiers or titles implicated by the issue.",
    )
    category: str = Field(
        default="general",
        description="Classifier for the issue type (e.g. coverage, dependency).",
    )


class PlannerCritique(BaseModel):
    """Critic evaluation used to decide whether further refinement is required."""

    summary: str = Field(
        default="",
        description="High-level verdict on the plan quality.",
    )
    blockers: List[str] = Field(
        default_factory=list,
        description="Blocking issues preventing execution.",
    )
    missing_deliverables: List[str] = Field(
        default_factory=list,
        description="Deliverables not addressed by any task.",
    )
    dependency_conflicts: List[str] = Field(
        default_factory=list,
        description="Cycles, missing dependencies, or ordering concerns.",
    )
    issues: List[PlannerCritiqueIssue] = Field(
        default_factory=list,
        description="Detailed issues discovered by the critic.",
    )
    recommendations: List[str] = Field(
        default_factory=list,
        description="Optional suggestions that improve the plan further.",
    )
